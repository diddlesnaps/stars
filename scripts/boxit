#!/bin/bash

function install_app() {
  # Modify or remove this as required by your application.
  if [ -n "${INSTALL_URL}" ]; then
    # Downloads a file with progress using wget and yad
    wget "${INSTALL_URL}" -O "${TMPDIR}/${INSTALL_FILE}" 2>&1 | \
    perl -p -e '$| = 1; s/^.* +([0-9]+%) +([0-9,.]+[GMKB]) +([0-9hms,.]+).*$/\1\n# Downloading... \2 (\3)/' | \
    yad --progress --title="${INSTALL_FILE}" --width=400 --center --no-buttons --auto-close --auto-kill --on-top
    # Installs the dos application
    mkdir -p "${UNPACK_ARCHIVE_TO}"
    case "${INSTALL_FILE}" in
      *.rar)
        ${UNRAR} x "${TMPDIR}/${INSTALL_FILE}" "${UNPACK_ARCHIVE_TO}"
        rm -f "${DRIVE_C_DIRECTORY}/dosbox.conf"
        ;;
      *.zip)
        unzip "${TMPDIR}/${INSTALL_FILE}" -d "${UNPACK_ARCHIVE_TO}"
        rm -f "${DRIVE_C_DIRECTORY}/dosbox.conf"
        ;;
      *)
        "${DOSLOADER}" -machine "$MACHINE_TYPE" -c "mount c ${DRIVE_C_DIRECTORY}" -c "mount t ${TMPDIR}" "T:/${INSTALL_FILE}"
        ;;
    esac
    # Removes the cached installer
    rm -v "${TMPDIR}/${INSTALL_FILE}"

    # Launch after install.
    launch_app
  fi
}

function launch_app() {
  # If we don't change into the program directory some assets may not be found
  set -x
  "${DOSLOADER}" -machine "$MACHINE_TYPE" -c "mount c ${DRIVE_C_DIRECTORY}" -c "${DOS_CMD//\//\\} ${DOS_CMD_APPEND//\//\\}"
}

function prepend_dir() {
  local var="$1"
  local dir="$2"
  if [ -d "$dir" ]; then
    eval "export $var=\"\$dir\${$var:+:\$$var}\""
  fi
}

function append_dir() {
  local var="$1"
  local dir="$2"
  if [ -d "$dir" ]; then
    eval "export $var=\"\${$var:+\$$var:}\$dir\""
  fi
}

# If we've been given an installer URL derive the filename
if [ -n "${INSTALL_URL}" ]; then
  INSTALL_FILE=$(basename "${INSTALL_URL}")
fi

# On Fedora $SNAP is under /var and there is some magic to map it to /snap.
# # We need to handle that case and reset $SNAP
SNAP=`echo $SNAP | sed -e "s|/var/lib/snapd||g"`

if [ "$SNAP_ARCH" == "amd64" ]; then
  ARCH="x86_64-linux-gnu"
elif [ "$SNAP_ARCH" == "armhf" ]; then
  ARCH="arm-linux-gnueabihf"
elif [ "$SNAP_ARCH" == "arm64" ]; then
  ARCH="aarch64-linux-gnu"
else
  ARCH="$SNAP_ARCH-linux-gnu"
fi

if [ -x "$SNAP/usr/bin/unrar-free" ]; then
  UNRAR=unrar-free
elif [ -x "$SNAP/usr/bin/unrar-nonfree" ]; then
  UNRAR=unrar-nonfree
else
  UNRAR=unrar
fi

[ -z "${DRIVE_C_DIRECTORY}" ] && export DRIVE_C_DIRECTORY="${SNAP_USER_COMMON}/.dosbox"
[ -z "${UNPACK_ARCHIVE_TO}" ] && export UNPACK_ARCHIVE_TO="${DRIVE_C_DIRECTORY}"
[ -z "${MACHINE_TYPE}" ] && export MACHINE_TYPE=svga_s3
export HOME="$SNAP_USER_COMMON"
export DOSLOADER="${SNAP}/usr/bin/dosbox"
export LD_LIBRARY_PATH="$SNAP/lib:$SNAP/lib/$ARCH:$SNAP/usr/lib:$SNAP/usr/lib/$ARCH:$LD_LIBRARY_PATH"

# Get the executable we're being asked to launch
if [ -n "${1}" ]; then
  DOS_CMD="${1}"
  DOS_EXE="${DOS_CMD/C\:/${DRIVE_C_DIRECTORY}}"
  shift
  DOS_CMD_APPEND="$@"
else
  echo "ERROR! I need an executable that I should launch. Exitting here."
  exit 1
fi

# XKB config
export XKB_CONFIG_ROOT=$SNAP/usr/share/X11/xkb

# Give XOpenIM a chance to locate locale data.
# This is required for text input to work in SDL2 games.
export XLOCALEDIR=$SNAP/usr/share/X11/locale

# Set XCursors path
export XCURSOR_PATH=$SNAP/usr/share/icons

# Mesa Libs for OpenGL support
append_dir LD_LIBRARY_PATH $SNAP/usr/lib/$ARCH/mesa
append_dir LD_LIBRARY_PATH $SNAP/usr/lib/$ARCH/mesa-egl

# Tell libGL where to find the drivers
export LIBGL_DRIVERS_PATH=$SNAP/usr/lib/$ARCH/dri
append_dir LD_LIBRARY_PATH $LIBGL_DRIVERS_PATH

# Workaround in snapd for proprietary nVidia drivers mounts the drivers in
# /var/lib/snapd/lib/gl that needs to be in LD_LIBRARY_PATH
# Without that OpenGL using apps do not work with the nVidia drivers.
# Ref.: https://bugs.launchpad.net/snappy/+bug/1588192
append_dir LD_LIBRARY_PATH /var/lib/snapd/lib/gl

# Pulseaudio export
append_dir LD_LIBRARY_PATH $SNAP/usr/lib/$ARCH/pulseaudio

# Tell GStreamer where to find its plugins
export GST_PLUGIN_PATH=$SNAP/usr/lib/$ARCH/gstreamer-1.0
export GST_PLUGIN_SYSTEM_PATH=$SNAP/usr/lib/$ARCH/gstreamer-1.0
# gst plugin scanner doesn't install in the correct path: https://github.com/ubuntu/snapcraft-desktop-helpers/issues/43
export GST_PLUGIN_SCANNER=$SNAP/usr/lib/$ARCH/gstreamer1.0/gstreamer-1.0/gst-plugin-scanner

# XDG Config
prepend_dir XDG_CONFIG_DIRS $SNAP/etc/xdg

# Define snaps' own data dir
prepend_dir XDG_DATA_DIRS $SNAP/usr/share
prepend_dir XDG_DATA_DIRS $SNAP_USER_COMMON

export HOME=$SNAP_USER_COMMON

# Set XDG_DATA_HOME to local path
export XDG_DATA_HOME=$SNAP_USER_COMMON/.local/share
mkdir -p $XDG_DATA_HOME

# Workaround for GLib < 2.53.2 not searching for schemas in $XDG_DATA_HOME:
#   https://bugzilla.gnome.org/show_bug.cgi?id=741335
prepend_dir XDG_DATA_DIRS $XDG_DATA_HOME

# Set cache folder to local path
export XDG_CACHE_HOME=$SNAP_USER_COMMON/.cache
mkdir -p $XDG_CACHE_HOME

# Set config folder to local path
export XDG_CONFIG_HOME=$SNAP_USER_COMMON/.config
mkdir -p $XDG_CONFIG_HOME

# Create $XDG_RUNTIME_DIR if not exists (to be removed when LP: #1656340 is fixed)
[ -n "$XDG_RUNTIME_DIR" ] && mkdir -p $XDG_RUNTIME_DIR -m 700

# Make PulseAudio socket available inside the snap-specific $XDG_RUNTIME_DIR
if [ -n "$XDG_RUNTIME_DIR" ]; then
    pulsenative="pulse/native"
    pulseaudio_sockpath="$XDG_RUNTIME_DIR/../$pulsenative"
    if [ -S "$pulseaudio_sockpath" ]; then
        export PULSE_SERVER="unix:${pulseaudio_sockpath}"
    fi
fi

# Font Config and themes
export FONTCONFIG_PATH=$SNAP/etc/fonts/conf.d
#export FONTCONFIG_FILE=$XDG_CONFIG_HOME/fontconfig/fonts.conf

# Gdk-pixbuf loaders
export GDK_PIXBUF_MODULE_FILE=$XDG_CACHE_HOME/gdk-pixbuf-loaders.cache
export GDK_PIXBUF_MODULEDIR=$SNAP/usr/lib/$ARCH/gdk-pixbuf-2.0/2.10.0/loaders
if [ -f $SNAP/usr/lib/$ARCH/gdk-pixbuf-2.0/gdk-pixbuf-query-loaders ] && [ ! -f "${GDK_PIXBUF_MODULE_FILE}" ]; then
  $SNAP/usr/lib/$ARCH/gdk-pixbuf-2.0/gdk-pixbuf-query-loaders > $GDK_PIXBUF_MODULE_FILE
fi

# If the executable exists then launch it otherwise install it then lauch it.
if [ -e "${DOS_EXE}" ]; then
  launch_app
else
  install_app
fi
